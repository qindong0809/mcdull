package ${packageName};

#foreach ($importClass in $importPackageList)
$importClass
#end

import cn.hutool.core.collection.ListUtil;
import cn.hutool.core.util.ObjUtil;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import io.gitee.dqcer.mcdull.framework.base.entity.RelEntity;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.List;


/**
 * ${basic.description} 数据库操作封装实现层
 *
 * @author ${basic.backendAuthor}
 * @since ${basic.backendDate}
 */
@Service
public class ${name.upperCamel}RepositoryImpl extends
        ServiceImpl<${name.upperCamel}Mapper, ${name.upperCamel}Entity> implements I${name.upperCamel}Repository{

    @Override
    public List<${name.upperCamel}Entity> queryListByIds(List<Integer> idList) {
        LambdaQueryWrapper<${name.upperCamel}Entity> wrapper = Wrappers.lambdaQuery();
        wrapper.in(${name.upperCamel}Entity::getId, idList);
        List<${name.upperCamel}Entity> list =  baseMapper.selectList(wrapper);
        if (ObjUtil.isNotNull(list)) {
            return list;
        }
        wrapper.orderByDesc(ListUtil.of(RelEntity::getCreatedTime, RelEntity::getUpdatedTime));
        return Collections.emptyList();
    }


    @Override
    public Page<${name.upperCamel}Entity> selectPage(${name.upperCamel}QueryDTO param) {
        LambdaQueryWrapper<${name.upperCamel}Entity> lambda = Wrappers.lambdaQuery();
        String keyword = param.getKeyword();
        if (ObjUtil.isNotNull(keyword)) {
            // TODO 组装查询条件
        }
        lambda.orderByDesc(ListUtil.of(RelEntity::getCreatedTime, RelEntity::getUpdatedTime));
        return baseMapper.selectPage(new Page<>(param.getPageNum(), param.getPageSize()), lambda);
    }

}